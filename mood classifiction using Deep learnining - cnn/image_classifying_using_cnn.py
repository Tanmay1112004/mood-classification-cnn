# -*- coding: utf-8 -*-
"""Image classifying using CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jVwc4Uu0S2U8dqYCSnwv2OzZoRM_qFH_
"""



"""# Mood Classification using CNN (Happy or Sad)"""

from google.colab import drive
drive.mount('/content/drive')

!nvidia-smi

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

img = image.load_img("/content/drive/MyDrive/class projects/traning/happy/istockphoto-1043782554-1024x1024.jpg")

plt.imshow(img)

i1 = cv2.imread("/content/drive/MyDrive/class projects/traning/happy/istockphoto-1043782554-1024x1024.jpg")
i1

# 3d metrics are created for the image
# the value ranges from 0-255

i1.shape

# shape of your image height, weight, rgb

train = ImageDataGenerator(rescale=1/200)
validation = ImageDataGenerator(rescale=1/200)

# to scale the image i need to divide with 255
# we need to resize the image using 200, 200 pixel

train_dataset = train.flow_from_directory(
    "/content/drive/MyDrive/class projects/traning",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

validation_dataset = train.flow_from_directory(
    "/content/drive/MyDrive/class projects/validation",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

train_dataset.class_indices

train_dataset.classes

# now we are applying maxpooling

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(200,200,3)),
                                    tf.keras.layers.MaxPool2D(2,2), # 3 filter we applied hear
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Flatten(),
                                    #
                                    tf.keras.layers.Dense(512,activation='relu'),
                                    #
                                    tf.keras.layers.Dense(1,activation='sigmoid')
                                    ])

model.compile(loss='binary_crossentropy',
              optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),
              metrics=['accuracy'])

model_fit = model.fit(train_dataset, epochs= 15)

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  print(i)

# dir_path = '/content/drive/MyDrive/class projects/validation/sad'

# for i in os.listdir(dir_path):
#  print(i)

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i, target_size=(200,200))
  plt.imshow(img)
  plt.show()

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i, target_size=(200,200))
  plt.imshow(img)
  plt.show()

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  val = model.predict(images)
  if val == 0:
    print("I am Happy")
  else:
    print("I am not Happy")







"""# Image classification using CNN Gradio app"""

!pip install gradio --quiet

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from PIL import Image
import gradio as gr

# Training Data
train = ImageDataGenerator(rescale=1/255)

train_dataset = train.flow_from_directory(
    "/content/drive/MyDrive/class projects/traning",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

# Validation Data (‚ö†Ô∏è if empty, comment it out)
validation = ImageDataGenerator(rescale=1/255)

validation_dataset = validation.flow_from_directory(
    "/content/drive/MyDrive/class projects/validation",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(200,200,3)),  # use Input() instead of input_shape warning
    tf.keras.layers.Conv2D(16,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512,activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1,activation='sigmoid')
])

model.compile(
    loss='binary_crossentropy',
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),
    metrics=['accuracy']
)

model.fit(train_dataset, epochs=5)

model.save("/content/drive/MyDrive/class projects/mood_cnn.h5")

def predict_mood(img):
    img = img.resize((200,200))
    x = np.array(img) / 255.0
    x = np.expand_dims(x, axis=0)
    prediction = model.predict(x, verbose=0)[0][0]
    mood = "üòä Happy" if prediction < 0.5 else "üò¢ Sad"
    confidence = (1 - prediction) if prediction < 0.5 else prediction
    return {
        mood: float(confidence),
        "üòä Happy" if mood == "üò¢ Sad" else "üò¢ Sad": float(1 - confidence)
    }

demo = gr.Interface(
    fn=predict_mood,
    inputs=gr.Image(type="pil", label="Upload an Image"),
    outputs=gr.Label(num_top_classes=2, label="Prediction"),
    title="Mood Classification with CNN üòäüò¢",
    description="Upload a face image, and the CNN will classify the mood as Happy or Sad."
)

demo.launch(debug=True, share=True)

# -*- coding: utf-8 -*-
# Mood Classification using CNN (Happy or Sad)
# Improved Version with Augmentation, EarlyStopping & Beautiful Gradio UI

# =====================
# 1. Setup
# =====================

!pip install gradio --quiet

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from PIL import Image
import gradio as gr

# =====================
# 2. Data Preparation
# =====================
train_aug = ImageDataGenerator(
    rescale=1/255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_aug = ImageDataGenerator(rescale=1/255)

train_dataset = train_aug.flow_from_directory(
    "/content/drive/MyDrive/class projects/traning",
    target_size=(200,200),
    batch_size=16,
    class_mode='binary'
)

# Validation fallback (auto skip if empty)
val_path = "/content/drive/MyDrive/class projects/validation"
if os.path.exists(val_path) and any(os.scandir(val_path)):
    validation_dataset = val_aug.flow_from_directory(
        val_path,
        target_size=(200,200),
        batch_size=16,
        class_mode='binary'
    )
else:
    validation_dataset = None
    print("‚ö†Ô∏è No validation data found. Training without validation.")

# =====================
# 3. Model Definition
# =====================
model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(200,200,3)),
    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256,activation='relu'),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(1,activation='sigmoid')
])

model.compile(
    loss='binary_crossentropy',
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005),
    metrics=['accuracy']
)

# =====================
# 4. Training with EarlyStopping
# =====================
callbacks = [
    EarlyStopping(monitor="val_loss", patience=3, restore_best_weights=True),
    ModelCheckpoint("/content/drive/MyDrive/class projects/best_mood_model.h5",
                    save_best_only=True, monitor="val_accuracy", mode="max")
]

if validation_dataset:
    history = model.fit(
        train_dataset,
        validation_data=validation_dataset,
        epochs=15,
        callbacks=callbacks
    )
else:
    history = model.fit(
        train_dataset,
        epochs=15,
        callbacks=[EarlyStopping(monitor="loss", patience=3, restore_best_weights=True)]
    )

# =====================
# 5. Prediction Function
# =====================
def predict_mood(img):
    img = img.resize((200,200))
    x = np.array(img) / 255.0
    x = np.expand_dims(x, axis=0)
    prediction = model.predict(x, verbose=0)[0][0]
    prob_happy = 1 - prediction
    prob_sad = prediction
    return {"üòä Happy": float(prob_happy), "üò¢ Sad": float(prob_sad)}

# =====================
# 6. Gradio Frontend
# =====================
demo = gr.Interface(
    fn=predict_mood,
    inputs=gr.Image(type="pil", label="Upload an Image"),
    outputs=gr.Label(num_top_classes=2, label="Mood Prediction"),
    title="Mood Classification CNN üé≠",
    description="Upload an image, and this CNN will classify mood as Happy üòä or Sad üò¢ with confidence scores.",
    examples=[
        ["/content/drive/MyDrive/class projects/testing/ai-generated-9691043_1280.png"],
        ["/content/drive/MyDrive/class projects/testing/istockphoto-1248639576-1024x1024.jpg"]
    ],
    live=False,
    theme="soft"  # nicer UI
)

demo.launch(debug=True, share=True)



