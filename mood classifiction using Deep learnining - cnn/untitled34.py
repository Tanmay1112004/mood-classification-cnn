# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jVwc4Uu0S2U8dqYCSnwv2OzZoRM_qFH_
"""



"""# Mood Classification using CNN (Happy or Sad)"""

from google.colab import drive
drive.mount('/content/drive')

!nvidia-smi

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

img = image.load_img("/content/drive/MyDrive/class projects/traning/happy/istockphoto-1043782554-1024x1024.jpg")

plt.imshow(img)

i1 = cv2.imread("/content/drive/MyDrive/class projects/traning/happy/istockphoto-1043782554-1024x1024.jpg")
i1

# 3d metrics are created for the image
# the value ranges from 0-255

i1.shape

# shape of your image height, weight, rgb

train = ImageDataGenerator(rescale=1/200)
validation = ImageDataGenerator(rescale=1/200)

# to scale the image i need to divide with 255
# we need to resize the image using 200, 200 pixel

train_dataset = train.flow_from_directory(
    "/content/drive/MyDrive/class projects/traning",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

validation_dataset = train.flow_from_directory(
    "/content/drive/MyDrive/class projects/validation",
    target_size=(200,200),
    batch_size=32,
    class_mode='binary'
)

train_dataset.class_indices

train_dataset.classes

# now we are applying maxpooling

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(200,200,3)),
                                    tf.keras.layers.MaxPool2D(2,2), # 3 filter we applied hear
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Flatten(),
                                    #
                                    tf.keras.layers.Dense(512,activation='relu'),
                                    #
                                    tf.keras.layers.Dense(1,activation='sigmoid')
                                    ])

model.compile(loss='binary_crossentropy',
              optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),
              metrics=['accuracy'])

model_fit = model.fit(train_dataset, epochs= 15)

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  print(i)

# dir_path = '/content/drive/MyDrive/class projects/validation/sad'

# for i in os.listdir(dir_path):
#  print(i)

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i, target_size=(200,200))
  plt.imshow(img)
  plt.show()

dir_path = '/content/drive/MyDrive/class projects/testing'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i, target_size=(200,200))
  plt.imshow(img)
  plt.show()

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  val = model.predict(images)
  if val == 0:
    print("I am Happy")
  else:
    print("I am not Happy")



















